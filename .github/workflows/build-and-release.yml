name: Build and Release

on:
  push:
    branches:
      - '**'  # This will trigger on all pushes to all branches

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adoptium'

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '7.2'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload JAR to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release or create one if it doesn't exist
          latest_release=$(curl -s --header "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/latest)
          
          if [[ "$latest_release" == *"Not Found"* ]]; then
            # If no latest release exists, create a new one
            release_response=$(curl -s --header "Authorization: token $GITHUB_TOKEN" \
              --data '{"tag_name": "latest", "name": "Latest Release", "body": "This is the latest build release."}' \
              https://api.github.com/repos/${{ github.repository }}/releases)
          
            # Extract the release ID from the response
            release_id=$(echo $release_response | jq -r .id)
          else
            # Extract the release ID from the response
            release_id=$(echo $latest_release | jq -r .id)
          fi
          
          # Upload the JAR file to the latest release
          curl -XPOST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            --data-binary @./build/libs/SigmaRebaseInstaller.jar \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/$release_id/assets?name=SigmaRebaseInstaller.jar"
